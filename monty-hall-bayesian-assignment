{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y8F-5tMKTQjL"
      },
      "source": [
        "## Assignment 2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "07Y_ONdkTQjR"
      },
      "source": [
        "This assignmemt is based on content discussed in module 2 and will work on a solution for the famous Monty Hall game.  Retrieved from https://en.wikipedia.org/wiki/Monty_Hall_problem\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7hNSzgdzTQjU"
      },
      "source": [
        "## Learning outcomes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2QtRX9sRTQjX"
      },
      "source": [
        "- Program a simple simulation to solve a concrete statistical problem\n",
        "- Develop insight into the Bayesian probabilistic viewpoint\n",
        "- Recognize that statistical intuition can sometimes be wrong\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lfLffNUWTQja"
      },
      "source": [
        "**Question**\n",
        "\n",
        "Given below is the description of the problem.  \n",
        "\n",
        "Suppose you're on a game show and you're given the choice of three doors.\n",
        "\n",
        "Behind one door is a car; behind the others, goats. The car and the goats were placed randomly behind the doors before the show.\n",
        "\n",
        "The rules are:\n",
        "\n",
        "After you have chosen a door, the door remains closed for the time being.\n",
        "The game show host, Monty Hall, who knows what is behind the doors, now has to open one of the two remaining doors, and the door he opens must have a goat behind it. If both remaining doors have goats behind them, he chooses one randomly.\n",
        "\n",
        "After Monty opens a door with a goat, he will ask you to decide whether you want to stay with your first choice or to switch to the last remaining door.\n",
        "Imagine that you chose Door 1 and the host opens Door 3, which has a goat.\n",
        "He then asks you \"Do you want to switch to Door Number 2?\" Is it to your advantage to change your choice?\n",
        "\n",
        "**NOTES:**\n",
        "1. The player may initially choose any of the three doors (not just Door 1).\n",
        "2. The host opens a different door revealing a goat (not necessarily Door 3).\n",
        "3. The host gives the player a second choice between the two remaining unopened doors.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L041acdjTQjb"
      },
      "source": [
        "![download.jpeg](attachment:download.jpeg)\n",
        "\n",
        "(Source: https://en.wikipedia.org/wiki/Monty_Hall_problem#)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dAuGtwxzTQje"
      },
      "source": [
        "- Write Python code to solve the Monty Hall problem. Simulate at least a thousand games using three doors for each strategy and show the results in such a way as to make it easy to compare the effects of each strategy.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GlZk3mKETQjg",
        "outputId": "08c960f5-66ba-408a-e666-35cb3c30d9c1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Win rate without switching doors = 31.6\n",
            "Win rate after switching doors = 69.19999999999999\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "doors = [\"car\", \"goat\", \"goat\"]\n",
        "\n",
        "# keeps initial door choice after first door opens\n",
        "\n",
        "attempts = 1000\n",
        "wins = 0\n",
        "\n",
        "for i in range(0, attempts):\n",
        "        random.shuffle(doors)\n",
        "        pick = random.randint(0,2)\n",
        "\n",
        "        goat_doors = []\n",
        "        for j in range(0,3):\n",
        "              if doors[j] == \"goat\":\n",
        "                    goat_doors.append(j)\n",
        "        if pick == goat_doors[0]:\n",
        "             host_opens = goat_doors[1]\n",
        "        elif pick == goat_doors[1]:\n",
        "              host_opens = goat_doors[0]\n",
        "        else:\n",
        "              host_opens = random.choice(goat_doors)\n",
        "\n",
        "        if doors[pick] == \"car\":\n",
        "            wins += 1\n",
        "\n",
        "win_rate_1 = (wins/attempts)*100\n",
        "\n",
        "# changes door choice after first door opens\n",
        "wins = 0\n",
        "\n",
        "for i in range(0, attempts):\n",
        "        random.shuffle(doors)\n",
        "        pick = random.randint(0,2)\n",
        "\n",
        "        goat_doors = []\n",
        "        for j in range(0,3):\n",
        "              if doors[j] == \"goat\":\n",
        "                    goat_doors.append(j)\n",
        "        if pick == goat_doors[0]:\n",
        "             host_opens = goat_doors[1]\n",
        "        elif pick == goat_doors[1]:\n",
        "              host_opens = goat_doors[0]\n",
        "        else:\n",
        "              host_opens = random.choice(goat_doors)\n",
        "\n",
        "        all_doors = [0,1,2]\n",
        "        all_doors.remove(pick)\n",
        "        all_doors.remove(host_opens)\n",
        "        switch_pick = all_doors[0]\n",
        "\n",
        "        if doors[switch_pick] == \"car\":\n",
        "            wins += 1\n",
        "\n",
        "\n",
        "win_rate_2 = (wins/attempts)*100\n",
        "\n",
        "print(f\"Win rate without switching doors = {win_rate_1}\")\n",
        "print(f\"Win rate after switching doors = {win_rate_2}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "NtLGQDPqvTYS",
        "outputId": "e2ba5e77-3624-463a-ade7-78bfc0b5df72"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "strategies = [\"Stay\", \"Switch\"]\n",
        "win_rates = [win_rate_1, win_rate_2]\n",
        "\n",
        "\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.pie(win_rates, labels=strategies, colors=[\"#eb107e\", \"#ad1034\"], startangle=90)\n",
        "plt.title(\"Monty Hall Problem: Stay Vs. Switch Rate\")\n",
        "plt.show()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
